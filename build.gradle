// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        kotlinVersion = '1.1.1'
        supportLibraryVersion = '25.3.1'
        multiDexVersion = '1.0.1'
        glideVersion = '3.7.0'
        daggerVersion = '2.10'
        parcelerVersion = '1.1.6'
        realmVersion = '3.0.0'
        stethoVersion = '1.4.2'
        stethoRealmVersion = '2.0.0'
        rxJavaVersion = '2.0.8'
        rxAndroidVersion = '2.0.1'
        rxRelayVersion = '2.0.0'
        retrofitVersion = '2.2.0'
        lottieVersion = '2.0.0-beta3'
        recyclerViewAnimatorsVersion = '2.2.6'
        caldroidVersion = '3.0.1'
        firebaseVersion = '10.2.1'

        junitVersion = '4.12'
        mockitoVersion = '2.7.17'
        espressoVersion = '2.2.2'
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.1'
        classpath "com.google.gms:google-services:3.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "io.realm:realm-gradle-plugin:$realmVersion"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//MockMaker
task createTestResources << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    if (System.env.MOCK_MAKER != null) {
        logger.info("Using MockMaker ${System.env.MOCK_MAKER}")
        mockMakerFile.parentFile.mkdirs()
        mockMakerFile.createNewFile()
        mockMakerFile.write(System.env.MOCK_MAKER)
    } else {
        logger.info("Using default MockMaker")
    }
}
